{"version":3,"sources":["components/FeedbackBtn/FeedbackBtn.js","components/Notification/Notification.js","components/Section/Section.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["FeedbackBtn","options","onLeaveFeedback","map","option","type","onClick","Notification","text","Section","title","children","defaultProps","Statistics","good","neutral","bad","total","positivePercentage","App","state","increment","event","setState","prevState","value","target","textContent","toLowerCase","totalCountFeedback","toFixed","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAGaA,EAAc,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACrC,OACE,6BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,6BACE,wBAAQC,KAAK,SAASC,QAASJ,EAA/B,SACGE,KAFIA,SCJJG,EAAe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC7B,OAAO,4BAAIA,KCDAC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,oCACE,6BAAKD,IACL,mCAAGC,QAKTF,EAAQG,aAAe,CACrBD,SAAU,ICVL,IAAME,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WC8CSC,E,4MAtDbC,MAAQ,CAAEN,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCK,UAAY,SAACC,GACX,EAAKC,UAAS,SAACC,GACb,IACMC,EADaH,EAAXI,OACaC,YAAYC,cACjC,OAAO,eACJH,EAAQD,EAAUC,GAAS,O,EAKlCI,mBAAqB,SAACf,EAAMC,EAASC,GACnC,OAAOF,EAAOC,EAAUC,G,EAG1BE,mBAAqB,SAACJ,EAAMC,EAASC,GAGnC,OADmBF,GADPA,EAAOC,EAAUC,GACM,KAAKc,QAAQ,I,4CAIlD,WACE,IAAQT,EAAsDU,KAAtDV,UAAWQ,EAA2CE,KAA3CF,mBAAoBX,EAAuBa,KAAvBb,mBACvC,EAA+Ba,KAAKX,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,qCACE,kDACA,cAAC,EAAD,CAASN,MAAO,6BAAhB,SACE,cAAC,EAAD,CACET,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBmB,MAIrB,cAAC,EAAD,CAASX,MAAO,aAAhB,SACGmB,EAAmBf,EAAMC,EAASC,GAAO,EACxC,cAAC,EAAD,CAAcR,KAAM,sBAEpB,cAAC,EAAD,CACEM,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,EAAmBf,EAAMC,EAASC,GACzCE,mBAAoBA,EAAmBJ,EAAMC,EAASC,c,GA9ClDgB,IAAMC,WCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9e5908e4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const FeedbackBtn = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul>\n      {options.map((option) => (\n        <li key={option}>\n          <button type=\"button\" onClick={onLeaveFeedback}>\n            {option}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nFeedbackBtn.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Notification = ({ text }) => {\n  return <p>{text}</p>;\n};\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      <>{children}</>\n    </section>\n  );\n};\n\nSection.defaultProps = {\n  children: \"\",\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) => {\n  return (\n    <ul>\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total: {total}</li>\n      <li>Positive feedback: {positivePercentage}%</li>\n    </ul>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n","import React from \"react\";\n\nimport { FeedbackBtn } from \"./components/FeedbackBtn/FeedbackBtn\";\nimport { Notification } from \"./components/Notification/Notification\";\nimport { Section } from \"./components/Section/Section\";\nimport { Statistics } from \"./components/Statistics/Statistics\";\n\nclass App extends React.Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  increment = (event) => {\n    this.setState((prevState) => {\n      const { target } = event;\n      const value = target.textContent.toLowerCase();\n      return {\n        [value]: prevState[value] + 1,\n      };\n    });\n  };\n\n  totalCountFeedback = (good, neutral, bad) => {\n    return good + neutral + bad;\n  };\n\n  positivePercentage = (good, neutral, bad) => {\n    let total = good + neutral + bad;\n    let percentage = ((good / total) * 100).toFixed(0);\n    return percentage;\n  };\n\n  render() {\n    const { increment, totalCountFeedback, positivePercentage } = this;\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <h1>Feedback Service</h1>\n        <Section title={\"Please leave your feedback\"}>\n          <FeedbackBtn\n            options={[\"good\", \"neutral\", \"bad\"]}\n            onLeaveFeedback={increment}\n          />\n        </Section>\n\n        <Section title={\"Statistics\"}>\n          {totalCountFeedback(good, neutral, bad) < 1 ? (\n            <Notification text={\"No feedback given\"} />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={totalCountFeedback(good, neutral, bad)}\n              positivePercentage={positivePercentage(good, neutral, bad)}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"modern-normalize/modern-normalize.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}